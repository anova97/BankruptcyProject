"0","##randomForest"
"0","precis<-c()"
"0","recal<-c()"
"0","accura<-c()"
"0","for(i in 1:10)"
"0","{"
"0","  training_sample <- sample(c(TRUE, FALSE), nrow(Xyear), replace = T, prob = c(0.7,0.3))"
"0","  train <- Xyear[training_sample, ]"
"0","  test <- Xyear[!training_sample, ]"
"0","  "
"0","  rf <- randomForest(class ~ ., data = train)"
"0","  pred_rf = predict(rf, newdata=test)"
"0","  wynik_rf <- data.frame(""class""=test$class, ""prognoza""=pred_rf)"
"0","  "
"0","  precis[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[1]"
"0","  recal[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[2]"
"0","  accura[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[3]"
"0","}"
"0",""
"0","porownanieMetod1r2[3,1]<-""Random forest"""
"0","porownanieMetod1r2[3,2]<-mean(precis, na.rm = TRUE)"
"0","porownanieMetod1r2[3,3]<-mean(recal, na.rm = TRUE)"
"0","porownanieMetod1r2[3,4]<-mean(accura, na.rm = TRUE)"
"0","porownanieMetod1r2[3,5]<-2*(porownanieMetod1r2[3,2]*porownanieMetod1r2[3,3]/(porownanieMetod1r2[3,2]+porownanieMetod1r2[3,3]))"
"0",""
"0","porownanieMetod1r2[3,2:5]<-round(porownanieMetod1r2[3,2:5],4)"
"0",""
"0","porownanieMetod1r2[3,] %>% regulartable()"
