outliersIndex<-which((x[,i])>quantile(x[,i], .995, na.rm = TRUE))&&which((x[,i])<quantile(x[,i], .005, na.rm = TRUE))
if(length(outliersIndex)>0)
{
x<-x[-outliersIndex,]
}
}
}
x<-as.data.frame(x)
return(x)
}
wz<-function(x)
{
sd(x, na.rm = T)/mean(x, na.rm = T)
}
## preprocessing danych: usunięcie braków, skalowanie, zastąpienie braków, zmiana typu zmiennej objaśnianej
dataYear<-function(x)
{
x$sumaBrak<-0
for(i in 1:nrow(x))
{
x$sumaBrak[i]<-sum(is.na(x[i,]))
}
x<-usunNAKol(x)
x<-usunNAWiersz(x)
class<-x$class
x<-x[,-(ncol(x)-1)]
x$class<-class
dane_sc<-c()
dane_sc<-scale(x)
dane_sc<-as.data.frame(dane_sc)
dane_sc$class<-as.factor(x$class)
knnOutput <- knnImputation(dane_sc[, !names(dane_sc) %in% "medv"])
X1year_n<- outlieryKwantyl(knnOutput)
wsp.zm<-sapply(X1year_n[,1:(ncol(X1year_n)-1)],wz)
wsp.zm<-round(wsp.zm, 2)
X1year_n2<-X1year_n[,abs(wsp.zm)>0.2]
X1year_n2$class<-ifelse(X1year_n2$class==0,"a0.Wyplacalny", "a1.Bankrut")
X1year_n2$class<-as.factor(X1year_n2$class)
return(X1year_n2)
}
recallBankrut<-function(x, what)
{
if(ncol(x)==1)
{
return(c(1,1))
}
else
{
precis=x[2,2]/(x[2,2]+x[1,2])
recal=x[2,2]/(x[2,2]+x[2,1])
accura=(x[1,1]+x[2,2])/(sum(x[1:2, 1:2]))
if(!missing(what))
{
if(what=="p")
{
return(precis)
}
if(what=="r")
{
return(recal)
}
}
else
{
return(c(precis, recal, accura))
}
}
}
X1year <- read_csv("../dane/1year.csv", col_types = cols(Attr1 = col_double(), Attr2 = col_double(),
Attr3 = col_double(), Attr4 = col_double(),
Attr5 = col_double(), Attr6 = col_double(),
Attr7 = col_double(), Attr8 = col_double(),
Attr9 = col_double(), Attr10 = col_double(),
Attr11 = col_double(), Attr12 = col_double(),
Attr13 = col_double(), Attr14 = col_double(),
Attr15 = col_double(), Attr16 = col_double(),
Attr17 = col_double(), Attr18 = col_double(),
Attr19 = col_double(), Attr20 = col_double(),
Attr21 = col_double(), Attr22 = col_double(),
Attr23 = col_double(), Attr24 = col_double(),
Attr25 = col_double(), Attr26 = col_double(),
Attr27 = col_double(), Attr28 = col_double(),
Attr29 = col_double(), Attr30 = col_double(),
Attr31 = col_double(), Attr32 = col_double(),
Attr33 = col_double(), Attr34 = col_double(),
Attr35 = col_double(), Attr36 = col_double(),
Attr37 = col_double(), Attr38 = col_double(),
Attr39 = col_double(), Attr40 = col_double(),
Attr41 = col_double(), Attr42 = col_double(),
Attr43 = col_double(), Attr44 = col_double(),
Attr45 = col_double(), Attr46 = col_double(),
Attr47 = col_double(), Attr48 = col_double(),
Attr49 = col_double(), Attr50 = col_double(),
Attr51 = col_double(), Attr52 = col_double(),
Attr53 = col_double(), Attr54 = col_double(),
Attr55 = col_double(), Attr56 = col_double(),
Attr57 = col_double(), Attr58 = col_double(),
Attr59 = col_double(), Attr60 = col_double(),
Attr61 = col_double(), Attr62 = col_double(),
Attr63 = col_double(), Attr64 = col_double(),
class= col_integer()))
#Xyear<-dataYear(X1year)
#paged_table(Xyear)
porownanieMetod1r2<-data.frame("Metoda"=0, "Precyzja"=0, "Czulosc"=0, "Dokladnosc"=0, "F1"=0)
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
precis<-c()
recal<-c()
accura<-c()
for(i in 1:10)
{
training_sample <- sample(c(TRUE, FALSE), nrow(Xyear), replace = T, prob = c(0.7,0.3))
train <- Xyear[training_sample, ]
test <- Xyear[!training_sample, ]
lda1 <- caret::train(class ~., data = train, method = "lda",
trControl = train.control)
pred1<-predict(lda1, test)
precis[i]<-recallBankrut(table(test$class, pred1))[1]
recal[i]<-recallBankrut(table(test$class, pred1))[2]
accura[i]<-recallBankrut(table(test$class, pred1))[3]
}
porownanieMetod1r2[1,1]<-"Analiza dyskryminacyjna"
porownanieMetod1r2[1,2]<-mean(precis)
porownanieMetod1r2[1,3]<-mean(recal)
porownanieMetod1r2[1,4]<-mean(accura)
porownanieMetod1r2[1,5]<-2*(porownanieMetod1r2[1,2]*porownanieMetod1r2[1,3]/(porownanieMetod1r2[1,2]+porownanieMetod1r2[1,3]))
porownanieMetod1r2[1,2:5]<-round(porownanieMetod1r2[1,2:5],4)
porownanieMetod1r2 %>% regulartable()
## drzewa decyzyjne
precis<-c()
recal<-c()
accura<-c()
for(i in 1:10)
{
training_sample <- sample(c(TRUE, FALSE), nrow(Xyear), replace = T, prob = c(0.7,0.3))
train <- Xyear[training_sample, ]
test <- Xyear[!training_sample, ]
tree.rose<-train(class ~., data = train, method = "rpart",
trControl = trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE), metric="ROC")
#tree.rose <- rpart(class ~ ., data = train)
pred.tree.rose <- predict(tree.rose, newdata = test)
porownanie<-data.frame("wartosc"=test$class, "tree"=pred.tree.rose)
#porownanie$tree<-ifelse(porownanie$tree==0,"a0.Wyplacalny", "a1.Bankrut")
precis[i]<-recallBankrut(table(porownanie$wartosc, porownanie$tree))[1]
recal[i]<-recallBankrut(table(porownanie$wartosc, porownanie$tree))[2]
accura[i]<-recallBankrut(table(porownanie$wartosc, porownanie$tree))[3]
}
porownanieMetod1r2[2,1]<-"Drzewo decyzyjne"
porownanieMetod1r2[2,2]<-mean(precis)
porownanieMetod1r2[2,3]<-mean(recal)
porownanieMetod1r2[2,4]<-mean(accura)
porownanieMetod1r2[2,5]<-2*(porownanieMetod1r2[2,2]*porownanieMetod1r2[2,3]/(porownanieMetod1r2[2,2]+porownanieMetod1r2[2,3]))
porownanieMetod1r2[2,2:5]<-round(porownanieMetod1r2[2,2:5],4)
porownanieMetod1r2[2,] %>% regulartable()
##randomForest
precis<-c()
recal<-c()
accura<-c()
for(i in 1:10)
{
training_sample <- sample(c(TRUE, FALSE), nrow(Xyear), replace = T, prob = c(0.7,0.3))
train <- Xyear[training_sample, ]
test <- Xyear[!training_sample, ]
rf <- randomForest(class ~ ., data = train)
pred_rf = predict(rf, newdata=test)
wynik_rf <- data.frame("class"=test$class, "prognoza"=pred_rf)
precis[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[1]
recal[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[2]
accura[i]<-recallBankrut(table(wynik_rf$class, wynik_rf$prognoza))[3]
}
porownanieMetod1r2[3,1]<-"Random forest"
porownanieMetod1r2[3,2]<-mean(precis, na.rm = TRUE)
porownanieMetod1r2[3,3]<-mean(recal, na.rm = TRUE)
porownanieMetod1r2[3,4]<-mean(accura, na.rm = TRUE)
porownanieMetod1r2[3,5]<-2*(porownanieMetod1r2[3,2]*porownanieMetod1r2[3,3]/(porownanieMetod1r2[3,2]+porownanieMetod1r2[3,3]))
porownanieMetod1r2[3,2:5]<-round(porownanieMetod1r2[3,2:5],4)
porownanieMetod1r2[3,] %>% regulartable()
#### NAIVE BAYES
precis<-c()
recal<-c()
accura<-c()
for(i in 1:10)
{
training_sample <- sample(c(TRUE, FALSE), nrow(Xyear), replace = T, prob = c(0.7,0.3))
train <- Xyear[training_sample, ]
test <- Xyear[!training_sample, ]
nb = train(class ~ .,
data=train, 'nb',trControl=trainControl(method='cv',number=10))
pred_nb = predict(nb, newdata=test)
wynik_nb <- data.frame(class = test$class, pred = pred_nb)
precis[i]<-recallBankrut(table(wynik_nb$class, wynik_nb$pred))[1]
recal[i]<-recallBankrut(table(wynik_nb$class, wynik_nb$pred))[2]
accura[i]<-recallBankrut(table(wynik_nb$class, wynik_nb$pred))[3]
}
porownanieMetod1r2[4,1]<-"Naive Bayes"
porownanieMetod1r2[4,2]<-mean(precis)
porownanieMetod1r2[4,3]<-mean(recal)
porownanieMetod1r2[4,4]<-mean(accura)
porownanieMetod1r2[4,5]<-2*(porownanieMetod1r2[4,2]*porownanieMetod1r2[4,3]/(porownanieMetod1r2[4,2]+porownanieMetod1r2[4,3]))
porownanieMetod1r2[4,2:5]<-round(porownanieMetod1r2[4,2:5],4)
porownanieMetod1r2[4,] %>% regulartable()
porownanieMetod1r2<-data.frame("Metoda"=0, "Precyzja"=0, "Czulosc"=0, "Dokladnosc"=0, "F1"=0)
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
precis<-c()
recal<-c()
accura<-c()
for(i in 1:2)
X1year <- read_csv("../dane/1year.csv", col_types = cols(Attr1 = col_double(), Attr2 = col_double(),
Attr3 = col_double(), Attr4 = col_double(),
Attr5 = col_double(), Attr6 = col_double(),
Attr7 = col_double(), Attr8 = col_double(),
Attr9 = col_double(), Attr10 = col_double(),
Attr11 = col_double(), Attr12 = col_double(),
Attr13 = col_double(), Attr14 = col_double(),
Attr15 = col_double(), Attr16 = col_double(),
Attr17 = col_double(), Attr18 = col_double(),
Attr19 = col_double(), Attr20 = col_double(),
Attr21 = col_double(), Attr22 = col_double(),
Attr23 = col_double(), Attr24 = col_double(),
Attr25 = col_double(), Attr26 = col_double(),
Attr27 = col_double(), Attr28 = col_double(),
Attr29 = col_double(), Attr30 = col_double(),
Attr31 = col_double(), Attr32 = col_double(),
Attr33 = col_double(), Attr34 = col_double(),
Attr35 = col_double(), Attr36 = col_double(),
Attr37 = col_double(), Attr38 = col_double(),
Attr39 = col_double(), Attr40 = col_double(),
Attr41 = col_double(), Attr42 = col_double(),
Attr43 = col_double(), Attr44 = col_double(),
Attr45 = col_double(), Attr46 = col_double(),
Attr47 = col_double(), Attr48 = col_double(),
Attr49 = col_double(), Attr50 = col_double(),
Attr51 = col_double(), Attr52 = col_double(),
Attr53 = col_double(), Attr54 = col_double(),
Attr55 = col_double(), Attr56 = col_double(),
Attr57 = col_double(), Attr58 = col_double(),
Attr59 = col_double(), Attr60 = col_double(),
Attr61 = col_double(), Attr62 = col_double(),
Attr63 = col_double(), Attr64 = col_double(),
class= col_integer()))
Xyear <- dataYear(X1year)
Xyear <- dataYear(X1year)
###Funkcje
## usuwanie wierszów i kolumn z dużą ilością braków danych
usunNAWiersz<-function(data)
{
data$sumaNA<-0
for(i in 1:nrow(data))
{
data$sumaNA[i]<-sum(is.na(data[i,]))
}
data<-data[which(data$sumaNA<5),]
return(data[,-(ncol(data))])
}
usunNAKol<-function(data)
{
data[nrow(data)+1,]<-0
for(i in 1:ncol(data))
{
data[nrow(data),i]<-sum(is.na(data[,i]))
}
data<-data[,which(data[nrow(data),]<70)]
return(data[-nrow(data),])
}
## usuwanie obserwacji odstających oparte o wsp. asymetrii
outlieryKwantyl<-function(x)
{
x<-as.data.frame(x)
for(i in 1:(ncol(x)-1))
{
coefAsy<-moment(as.double(x[,i]), order=3, center=TRUE, na.rm = TRUE)/((sd(x[,i], na.rm = TRUE))^3)
if(coefAsy>1)
{
outliersIndex<-which((x[,i])>quantile(x[,i], .99, na.rm = TRUE))
if(length(outliersIndex)>0)
{
x<-x[-outliersIndex,]
}
}
if(coefAsy<(-1))
{
outliersIndex<-which((x[,i])<quantile(x[,i], .01, na.rm = TRUE))
if(length(outliersIndex)>0)
{
x<-x[-outliersIndex,]
}
}
if(coefAsy>-1&&coefAsy<1)
{
outliersIndex<-which((x[,i])>quantile(x[,i], .995, na.rm = TRUE))&&which((x[,i])<quantile(x[,i], .005, na.rm = TRUE))
if(length(outliersIndex)>0)
{
x<-x[-outliersIndex,]
}
}
}
x<-as.data.frame(x)
return(x)
}
wz<-function(x)
{
sd(x, na.rm = T)/mean(x, na.rm = T)
}
## preprocessing danych: usunięcie braków, skalowanie, zastąpienie braków, zmiana typu zmiennej objaśnianej
dataYear <- function(x)
{
x$sumaBrak <- 0
for(i in 1:nrow(x))
{
x$sumaBrak[i] <- sum(is.na(x[i,]))
}
x <- usunNAKol(x)
x <- usunNAWiersz(x)
class <- x$class
x <- x[,-(ncol(x)-1)]
x$class <- class
dane_sc <- c()
dane_sc <- scale(x)
dane_sc <- as.data.frame(dane_sc)
dane_sc$class <- as.factor(x$class)
knnOutput <- knnImputation(x, scale = TRUE)
knnOutput  <-  knnImputation(dane_sc[,1:(ncol(dane_sc)-2)])
knnOutput$sumaBrak <- dane_sc$sumaBrak
knnOutput$class <- dane_sc$class
X1year_n <-  outlieryKwantyl(knnOutput)
wsp.zm <- sapply(X1year_n[,1:(ncol(X1year_n)-1)],wz)
wsp.zm <- round(wsp.zm, 2)
X1year_n2 <- X1year_n[,abs(wsp.zm)>0.2]
X1year_n2$class <- ifelse(X1year_n2$class==0,"a0.Wyplacalny", "a1.Bankrut")
X1year_n2$class <- as.factor(X1year_n2$class)
korelacja <- cor(X1year_n2[,1:(ncol(X1year_n2)-1)])
highCorr  <-  findCorrelation(korelacja, cutoff = .9)
X1year_n2 <- X1year_n2[, -highCorr]
return(X1year_n2)
}
recallBankrut<-function(x, what)
{
if(ncol(x)==1)
{
return(c(1,1))
}
else
{
precis=x[2,2]/(x[2,2]+x[1,2])
recal=x[2,2]/(x[2,2]+x[2,1])
accura=(x[1,1]+x[2,2])/(sum(x[1:2, 1:2]))
if(!missing(what))
{
if(what=="p")
{
return(precis)
}
if(what=="r")
{
return(recal)
}
}
else
{
return(c(precis, recal, accura))
}
}
}
X1year <- read_csv("../dane/1year.csv", col_types = cols(Attr1 = col_double(), Attr2 = col_double(),
Attr3 = col_double(), Attr4 = col_double(),
Attr5 = col_double(), Attr6 = col_double(),
Attr7 = col_double(), Attr8 = col_double(),
Attr9 = col_double(), Attr10 = col_double(),
Attr11 = col_double(), Attr12 = col_double(),
Attr13 = col_double(), Attr14 = col_double(),
Attr15 = col_double(), Attr16 = col_double(),
Attr17 = col_double(), Attr18 = col_double(),
Attr19 = col_double(), Attr20 = col_double(),
Attr21 = col_double(), Attr22 = col_double(),
Attr23 = col_double(), Attr24 = col_double(),
Attr25 = col_double(), Attr26 = col_double(),
Attr27 = col_double(), Attr28 = col_double(),
Attr29 = col_double(), Attr30 = col_double(),
Attr31 = col_double(), Attr32 = col_double(),
Attr33 = col_double(), Attr34 = col_double(),
Attr35 = col_double(), Attr36 = col_double(),
Attr37 = col_double(), Attr38 = col_double(),
Attr39 = col_double(), Attr40 = col_double(),
Attr41 = col_double(), Attr42 = col_double(),
Attr43 = col_double(), Attr44 = col_double(),
Attr45 = col_double(), Attr46 = col_double(),
Attr47 = col_double(), Attr48 = col_double(),
Attr49 = col_double(), Attr50 = col_double(),
Attr51 = col_double(), Attr52 = col_double(),
Attr53 = col_double(), Attr54 = col_double(),
Attr55 = col_double(), Attr56 = col_double(),
Attr57 = col_double(), Attr58 = col_double(),
Attr59 = col_double(), Attr60 = col_double(),
Attr61 = col_double(), Attr62 = col_double(),
Attr63 = col_double(), Attr64 = col_double(),
class= col_integer()))
Xyear <- dataYear(X1year)
dataYear(X1year)
x<-X1year
x$sumaBrak <- 0
for(i in 1:nrow(x))
{
x$sumaBrak[i] <- sum(is.na(x[i,]))
}
x <- usunNAKol(x)
x <- usunNAWiersz(x)
class <- x$class
x <- x[,-(ncol(x)-1)]
x$class <- class
dane_sc <- c()
dane_sc <- scale(x)
dane_sc <- as.data.frame(dane_sc)
dane_sc$class <- as.factor(x$class)
knnOutput <- knnImputation(x, scale = TRUE)
knnOutput  <-  knnImputation(dane_sc[,1:(ncol(dane_sc)-2)])
knnOutput$sumaBrak <- dane_sc$sumaBrak
knnOutput$class <- dane_sc$class
X1year_n <-  outlieryKwantyl(knnOutput)
wsp.zm <- sapply(X1year_n[,1:(ncol(X1year_n)-1)],wz)
wsp.zm <- round(wsp.zm, 2)
X1year_n2 <- X1year_n[,abs(wsp.zm)>0.2]
abs(wsp.zm)>0.2
wsp.zm
X1year_n
outlieryKwantyl
x
x$sumaBrak <- 0
for(i in 1:nrow(x))
{
x$sumaBrak[i] <- sum(is.na(x[i,]))
}
x <- usunNAKol(x)
x <- usunNAWiersz(x)
class <- x$class
x <- x[,-(ncol(x)-1)]
x$class <- class
x
dane_sc <- c()
dane_sc <- scale(x)
dane_sc <- as.data.frame(dane_sc)
dane_sc$class <- as.factor(x$class)
dane_sc
knnOutput <- knnImputation(x, scale = TRUE)
knnOutput
knnOutput  <-  knnImputation(dane_sc[,1:(ncol(dane_sc)-2)])
knnOutput$sumaBrak <- dane_sc$sumaBrak
knnOutput$class <- dane_sc$class
knnOutput
X
X1year_n <-  outlieryKwantyl(knnOutput)
X1year_n
wsp.zm <- sapply(X1year_n[,1:(ncol(X1year_n)-1)],wz)
wsp.zm
wsp.zm <- round(wsp.zm, 2)
X1year_n2 <- X1year_n[,abs(wsp.zm)>0.2]
X1year_n2$class <- ifelse(X1year_n2$class==0,"a0.Wyplacalny", "a1.Bankrut")
X1year_n2$class <- as.factor(X1year_n2$class)
korelacja <- cor(X1year_n2[,1:(ncol(X1year_n2)-1)])
highCorr  <-  findCorrelation(korelacja, cutoff = .9)
X1year_n2 <- X1year_n2[, -highCorr]
wsp.zm
dataYear(X1year)
x<-X1year
x$sumaBrak <- 0
for(i in 1:nrow(x))
{
x$sumaBrak[i] <- sum(is.na(x[i,]))
}
x <- usunNAKol(x)
x <- usunNAWiersz(x)
class <- x$class
x <- x[,-(ncol(x)-1)]
x$class <- class
dane_sc <- c()
dane_sc <- scale(x)
dane_sc <- as.data.frame(dane_sc)
dane_sc$class <- as.factor(x$class)
knnOutput <- knnImputation(x, scale = TRUE)
knnOutput  <-  knnImputation(dane_sc[,1:(ncol(dane_sc)-2)])
knnOutput$sumaBrak <- dane_sc$sumaBrak
knnOutput$class <- dane_sc$class
X1year_n <-  outlieryKwantyl(knnOutput)
wsp.zm <- sapply(X1year_n[,1:(ncol(X1year_n)-1)],wz)
wsp.zm <- round(wsp.zm, 2)
dane_sc
View(dane_sc)
dane_sc <- c()
dane_sc <- scale(x)
dane_sc <- as.data.frame(dane_sc)
dane_sc$class <- as.factor(x$class)
knnOutput <- knnImputation(x, scale = TRUE)
knnOutput  <-  knnImputation(dane_sc[,1:(ncol(dane_sc)-2)])
knnOutput$sumaBrak <- dane_sc$sumaBrak
knnOutput$class <- dane_sc$class
X1year_n <-  outlieryKwantyl(knnOutput)
View(X1year_n)
knnOutput
wsp.zm <- sapply(knnOutput[,1:(ncol(knnOutput)-1)],wz)
wsp.zm <- round(wsp.zm, 2)
X1year_n2 <- X1year_n[,abs(wsp.zm)>0.2]
X1year_n2
X1year_n2 <- knnOutput[,abs(wsp.zm)>0.2]
X1year_n2$class <- ifelse(X1year_n2$class==0,"a0.Wyplacalny", "a1.Bankrut")
X1year_n2$class <- as.factor(X1year_n2$class)
korelacja <- cor(X1year_n2[,1:(ncol(X1year_n2)-1)])
highCorr  <-  findCorrelation(korelacja, cutoff = .9)
X1year_n2 <- X1year_n2[, -highCorr]
